package com.kh.first; //package 선언부. [com--부터는 지금 작업하고 있는 현재 class의 위치. class를 만들면 1행은 이렇게 시작.]

	/*[package 없이 class만 만드는 경우는 없음]_[package이름의 .은 구분자 역할을 함. 계층적 구조로 폴더를 생성하게 됨]
	 * 주석문(comments)
	 * 
	 * 주석은 프로그램 실행에 영향을 끼치지 않음!
	 * 코드를 작성한 후 코드를 이해하기 쉽도록 하기 위해 작성
	 * 유지보수시간을 줄일 수 있음!!['유지보수' 개발업계 내 중요단어. 개발시간보다 유지보수기간이 더 길기 때문. 80%이상. 유지보수시간, 유지보수기간 적게 드는 관점으로 접근]
	 * 
	 * 주석의 종류 3가지 중 2가지
	 * 
	 * 1. 한 줄 주석 // : 주석 내용이 한 줄 일 때 사용
	 * 		"//" 다음부터 줄의 끝까지 모든 내용이 주석으로 간주
	 * 
	 * 2. 여러 줄 주석 (/*~~*) : 여러 줄 주석이 필요할 때 사용 
	 * 	"/**" 사이의 모든 내용이 주석으로 간주 
	 * 
	 */


	/*
	 * 패키지(package)
	 * 
	 * 하나의 패키지 안에 여러 클래스가 존재할 수 있음.
	 * 단, 동일한 이름의 클래스는 존재할 수 없음.
	 * 
	 * 프로그램을 만들 때, 모든 클래스들을 동일한 패키지 안에 관리하면 관리가 힘들기 때문에, 
	 * 클래스들을 용도에 맞게 구분해서 패키지에 보관하는 것을 권장한다.
	 * 
	 * 권장사항
	 * 
	 * 패키지는 적어도 3단계 이상으로 만들어주는 것을 권장.
	 * com.kh.first  [ex _ com.naver com.google com.회사이름.프로젝트명,팀이름,카테고리명 등]
	 * 
	 */






public class HelloWorld { //[Helloworld에 커서 올리면 풀클래스명이 나옴, 경로까지. 다른 이름은 같고 경로는 다른 클래스와 구분하기 위함]
	/*[public, class와 같이 모든 보라색은 키워드(예약어)라고 부름. 키워드(예약어)로는 클래스명을 만들 수 없다. public은 접근제한자(총 4개??), class는 예약어 다음에 배울 예정. helloworld는 클래스식별자]*/ 
	// public(접근제한자 19.20일에 배울 예정)
	// 클래스명을 HelloWorld라고 지었다. { scope(이 괄호 안 영역의 이름, 괄호 사이는 class block) }
	
	// 블록{scope}은 중괄호 시작점부터 끝나는 부분까지를 이야기하며, 복합문을 구성하는 요소. (복합문 여러 개 쓰겠다는 의미. 무한히는 안되고)
	// 클래스에 종속된 문장이 다수 개 일 때 '{'로 시작하고 '}'로 닫는다.
	
	// main method : 프로그램의 시작점, 프로그램 당 1개는 가지고 있어야 함(시작점이니까) (다른 프로그램에서는 entry point, 프로그램이 시작되는 점) 
	
	public void method() {
		
	}
	public static void main(String[] args) {	// String에 S 대문자인 것 주의(클래스라서 그럼. 암기영역은 아니고 나중에 설명). args (arguments의 약자, 암묵적 약속)
		
		
		/*run 하면 컴퓨터는 main을 먼저 찾음. 꼭 이 양식이어야 함 String까지 세트 그 다음것도 관습이니까 바꿀 수 있더라도 세트. 이게 없으면 에러*/
		/* Method  : 사전적으로는 기능을 의미, 하나의 기능 단위.
		 		하나의 클래스 안에 여러 개의 메소드가 존재할 수 있음. (메소드 안에 다른 메소드는 X, 병렬적으로 기재)
		 		메소드를 사용할 때는 반드시 "호출"해야 한다.*/
		
		/* 공백문자는 빈 칸, 탭 문자, 빈 줄 등이 있으며
		 		소스코드를 보기 좋게 하고 알아보기 쉽게 하기 위함이다. 소스코드 실행과는 전혀 무관하다.
		 		즉, 프로그램을 구조화된 형태로 표현하는 데 유용하다.*/
		printMyName();
		System.out.print("Hello KH World!"); //명령문. 함수라고 하면 안됨. 얘는 출력문. S 대문자인 것 유의. console(window에서 열었던)에 출력. 언제 어떤 에러가 나오는지도 습득하는 게 중요. 대략 200개정도
		// * 세미콜론(;) : 논리적인 한 문장이 끝날 때 반드시 세미콜론을 붙여야 함.
		
		printMyName(); //메소드 호출 => static메인메소드에서는 static함수만 호출 할 수 있나???
		
	} // main Method 영역 끝__ main메소드가 끝나면 프로그램 종료됨.	
	/*메소드 작성 등 뭐를 만드는 것을 '선언한다'고 함*/
	
	// 본인의 이름을 출력하는 기능. 메소드는 메소드() 소괄호를 붙여서 시작. 클래스는 {}, 메소드는 (). ()가 붙어있으면 메소드라고 생각. 그러니까 System...print() 얘도 메소드. print라는 기능이라 받아들이면 됨.
	public static void printMyName() { //printMyName 메소드 시작
		
		// 안녕하세요. 제 이름은 XXX입니다.
		System.out.print("first패키지의 프린트네임");
		
	}// printMyName 메소드 끝. 만들어놓고 main에서 '호출'하지 않으면 실행되지 않음.
	
	
	
	
} // {HelloWorld의 class block} 끝 . class block 밖에서 작업하면 syntax error 잘못됨. 작업은 class block 내부에서.
// 위에것들 전부 다 source code. 소스코드-컴퓨터조작-결과가 화면상 출력.
/* 자바-운영체제에 종속되지 않음->운영체재마다 컴파일 할 필요가 없다는 뜻. 운영체재 것을 돌리는 것이 아니라 JVM(자바가상컴퓨터)에서 작동시키기 때문. 완전한 말은 아니고, 소스코드는 종속 안 되는데 JVM은 운영체재에 종속됨
	C언어가 운영체재마다 컴파일해야 한다는 단점이 있으나 자바가 대체하지 못 했음. 자바는 대신 소스코드->JVM->컴퓨터로 2번 바꿔줘야해서 속도가 느리기 때문
		src에 있는 helloworld.java는 소스코드, bin에 있는 helloworld.class가 jvm에서 동작*/